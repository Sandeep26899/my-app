{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","error","setError","mic","setMic","finalTranscripts","value","onChange","e","target","rows","disabled","length","UpperCaseText","toUpperCase","LowerCaseText","toLowerCase","CaptalizeCaseText","replace","a","SentenceCaseText","charAt","slice","RemoveSpace","split","join","copyText","document","getElementById","innerHTML","navigator","clipboard","writeText","setTimeout","remove","window","speechRecognizer","webkitSpeechRecognition","continuous","interimResults","lang","start","onresult","event","interimTranscripts","i","resultIndex","results","transcript","isFinal","onerror","console","onspeechend","log","filter","element","defaultProps","Alert","style","height","alert","role","word","lower","capitalize","msg","About","App","setMode","setAlert","showAlert","message","name","body","backgroundColor","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1e312be2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              {/* <li className=\"nav-item\">\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\n              </li> */}\n            </ul>\n            \n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                <input type=\"checkbox\" className=\"form-check-input\" id=\"customSwitch\" onClick={props.toggleMode} />\n                <label className=\"form-check-label\" htmlFor=\"customSwitch\">{props.mode==='light'?'Enable Dark Mode':'Disable Dark Mode'}</label>\n            </div>\n          </div>\n        </div>\n      </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string\n}\n\nNavbar.defaultProps = {\n    title: 'Set Title Here'\n}\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [mic, setMic] = useState(false);\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n\n  const handleUpperCase = () => {\n    let UpperCaseText = text.toUpperCase();\n    setText(UpperCaseText);\n    // props.showAlert('UpperCase transform done', 'success');\n  };\n\n  const handleLowerCase = () => {\n    let LowerCaseText = text.toLowerCase();\n    setText(LowerCaseText);\n  };\n\n  const handleCaptalize = () => {\n    let CaptalizeCaseText = text.toLowerCase().replace(/\\b./g, function (a) {\n      return a.toUpperCase();\n    });\n    setText(CaptalizeCaseText);\n  };\n\n  const handleSentence = () => {\n    let SentenceCaseText =\n      text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n    setText(SentenceCaseText);\n  };\n\n  const handleRemoveSpaces = () => {\n    let RemoveSpace = text.split(/[ ]+/);\n    setText(RemoveSpace.join(\" \"));\n  };\n\n  const handleCopy = () => {\n    let copyText = text;\n    document.getElementById(\"appendText\").innerHTML =\n      '<div id=\"copied\" class=\"alert alert-success mt-3 p-2 mb-0\" role=\"alert\">Text copied to clipboard</div>';\n    navigator.clipboard.writeText(copyText);\n    setTimeout(() => {\n      document.getElementById(\"copied\").remove();\n    }, 4000);\n  };\n\n  const handleRemoveNumeric = () => {\n    setText(text.replace(/[0-9]/g, \"\"));\n  };\n\n  const handleClear = () => {\n    setText(\"\");\n  };\n  let finalTranscripts = \"\";\n\n  const handleSpeechToText = () => {\n    if (\"webkitSpeechRecognition\" in window) {\n      const speechRecognizer = new window.webkitSpeechRecognition();\n      speechRecognizer.continuous = true;\n      speechRecognizer.interimResults = true;\n      speechRecognizer.lang = \"en-US\";\n      speechRecognizer.start();\n      setMic(true);\n\n      speechRecognizer.onresult = function (event) {\n        let interimTranscripts = \"\";\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          transcript.replace(\"\\n\", \"<br>\");\n          if (event.results[i].isFinal) {\n            finalTranscripts += transcript;\n          } else {\n            interimTranscripts += transcript;\n          }\n        }\n        const result = finalTranscripts + interimTranscripts;\n        setText(result);\n        // finalTranscripts = \"\";\n      };\n      speechRecognizer.onerror = function (event) {\n        setMic(false);\n        console.error(\"Speech recognition error:\", event.error);\n      };\n\n      speechRecognizer.onspeechend = () => {\n        setMic(false);\n        console.log(\"Speech recognition has stopped.\");\n      };\n    } else {\n      setError(\n        \"Your browser is not supported speech to text. Please download Google Chrome or update your Google Chrome.\"\n      );\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"mb-3 mt-3\">\n        <h2\n          className={`mb-3 text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}\n        >\n          {props.title}\n        </h2>\n        <textarea\n          className={`form-control text-${\n            props.mode === \"dark\" ? \"light\" : \"dark\"\n          } bg-${props.mode === \"dark\" ? \"dark\" : \"light\"}`}\n          value={text}\n          onChange={(e) => handleOnChange(e)}\n          id=\"myBox\"\n          rows=\"8\"\n          disabled={mic}\n        ></textarea>\n        <span id=\"appendText\"></span>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mt-3 me-2\"\n          onClick={handleUpperCase}\n        >\n          UPPER CASE\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mt-3 me-2\"\n          onClick={handleLowerCase}\n        >\n          lower case\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mt-3 me-2\"\n          onClick={handleCaptalize}\n        >\n          Capitalized Case\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mt-3 me-2\"\n          onClick={handleSentence}\n        >\n          Sentence case\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mt-3 me-2\"\n          onClick={handleRemoveSpaces}\n        >\n          Remove Extra Spaces\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mt-3 me-2\"\n          onClick={handleCopy}\n        >\n          Copy Text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mt-3 me-2\"\n          onClick={handleRemoveNumeric}\n        >\n          Remove Numeric Digits\n        </button>\n        <button\n          disabled={error || mic}\n          className=\"btn btn-primary mt-3 me-2\"\n          onClick={handleSpeechToText}\n        >\n          {mic ? \"Listening\" : \"Speech to Text\"}\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-danger mt-3 me-2\"\n          onClick={handleClear}\n        >\n          Clear Text\n        </button>\n      </div>\n      <span className=\"text-danger d-block mb-2\">{error}</span>\n      <div className=\"mb-3\">\n        <h3 className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\n          Your Text Summary\n        </h3>\n        <p className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\n          {text.split(/\\s+/).filter((element) => element.length !== 0).length}{\" \"}\n          {text.split(/\\s+/).filter((element) => element.length !== 0)\n            .length === 1\n            ? \"Word\"\n            : \"Words\"}{\" \"}\n          and {text.length} {text.length === 1 ? \"Character\" : \"Characters\"}\n        </p>\n\n        {text.length > 0 && (\n          <>\n            <h3 className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\n              Preview\n            </h3>\n            <p className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\n              {text}\n            </p>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize=(word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height:'50px'}}>\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n            </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <div className=\"container\">\n            <div className=\"mb-3 mt-3\">\n               <p>This is About Page</p>\n            </div>\n        </div>\n    )\n}\n","import './App.css';\nimport Navbar from './components/Navbar.js';\nimport TextForm from './components/TextForm.js';\nimport Alert from './components/Alert.js';\nimport React, {useState} from 'react';\nimport About from './components/About';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  \n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n  setAlert({\n    msg: message,\n    type: type\n  })  \n  setTimeout(()=> { \n    setAlert(null);\n  }, 1500);  \n  }\n\n  const toggleMode = () => {\n    if(mode === 'dark'){\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Mode Enabled', 'success');\n    }\n    else{\n      setMode('dark');\n      document.body.style.backgroundColor = '#042745';\n      showAlert('Dark Mode Enabled', 'success');\n    }\n  }\n\n    return (\n      <Router>\n        <Navbar title=\"TextUtils\" name=\"Sandeep\" mode={mode} toggleMode={toggleMode}/> \n        <Alert alert={alert}/>\n        \n        <Switch>\n\n            <Route exact path=\"/\">\n            <TextForm title=\"Enter Text Below To Convert:\" mode={mode} showAlert={showAlert}/>\n            </Route>\n\n            <Route exact path=\"/about\">\n              <About/>\n            </Route>\n\n        </Switch>\n      </Router>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}